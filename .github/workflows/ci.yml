name: CI

on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install pre-commit
      run: pip install pre-commit

    - name: Run lint and security checks
      env:
        GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      run: pre-commit run --all-files

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=src --cov-report=xml --cov-report=html --cov-report=term-missing

    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      with:
        name: coverage-reports
        path: |
          coverage.xml
          htmlcov/

  gitguardian-scan:
    name: GitGuardian Repository History Scan
    runs-on: ubuntu-latest
    needs: lint-and-test

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install ggshield
      run: pip install ggshield

    - name: GitGuardian scan repository history
      env:
        GITGUARDIAN_API_KEY: ${{ secrets.GIT_GUARDIAN_API_KEY }}
      run: ggshield secret scan repo .

  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    needs: [lint-and-test, gitguardian-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download coverage reports
      uses: actions/download-artifact@v4
      with:
        name: coverage-reports

    - name: SonarCloud Scan
      uses: SonarSource/sonarqube-scan-action@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
        args: >
          -Dsonar.qualitygate.wait=false
          -Dsonar.python.coverage.reportPaths=coverage.xml

    - name: Check Quality Gate Status
      if: always()
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        SONAR_HOST_URL: https://sonarcloud.io
      run: |
        project_key="reaandrew_acronymcreator"

        # Get the analysis task ID from the report-task.txt generated by the scanner
        task_id=$(grep 'ceTaskId' .scannerwork/report-task.txt | cut -d= -f2)

        # Poll until analysis is complete
        while : ; do
          status=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$task_id" | jq -r .task.status)
          if [ "$status" = "SUCCESS" ]; then
            analysis_id=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/ce/task?id=$task_id" | jq -r .task.analysisId)
            break
          elif [ "$status" = "FAILED" ]; then
            echo "SonarQube analysis failed."
            exit 1
          fi
          echo "Waiting for analysis to complete..."
          sleep 5
        done

        # Get Quality Gate status and condition results
        response=$(curl -s -u "$SONAR_TOKEN:" "$SONAR_HOST_URL/api/qualitygates/project_status?analysisId=$analysis_id")
        gate_status=$(echo "$response" | jq -r .projectStatus.status)
        echo "Quality Gate Status: $gate_status"

        # Show all conditions for debugging
        echo "=== All Quality Gate Conditions ==="
        echo "$response" | jq -r '.projectStatus.conditions[] | "- \(.metricKey): \(.actualValue) (threshold: \(.errorThreshold), comparator: \(.comparator), status: \(.status))"'
        echo "==================================="

        if [ "$gate_status" = "null" ] || [ -z "$gate_status" ]; then
          echo "Quality Gate status is null or empty. Analysis may not be complete."
          echo "Response: $response"
          exit 1
        elif [ "$gate_status" != "OK" ]; then
          echo "Quality Gate failed for the following reasons:"
          echo "$response" | jq -r '.projectStatus.conditions[] | select(.status=="ERROR") | "- \(.metricKey): \(.actualValue) \(.comparator) \(.errorThreshold)"'
          exit 1
        else
          echo "Quality Gate passed successfully!"
        fi

  semgrep:
    name: Semgrep Security Analysis
    runs-on: ubuntu-latest
    needs: [lint-and-test, gitguardian-scan]
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
    env:
      SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
    container:
      image: semgrep/semgrep

    steps:
    - uses: actions/checkout@v4
    - name: Run Semgrep analysis
      run: semgrep ci

  build:
    runs-on: ubuntu-latest
    needs: [lint-and-test, gitguardian-scan, sonarcloud, semgrep]
    if: always() && !cancelled() && !contains(needs.*.result, 'failure')

    steps:
    - uses: actions/checkout@v4

    - name: Run basic checks
      run: |
        echo "Running CI pipeline..."
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"

    - name: List files
      run: |
        echo "Files in repository:"
        find . -type f -not -path './.git/*' | head -20

  release:
    runs-on: ubuntu-latest
    needs: [lint-and-test, gitguardian-scan, sonarcloud, semgrep, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: Install semantic-release
      run: |
        npm install -g semantic-release @semantic-release/changelog @semantic-release/git conventional-changelog-conventionalcommits

    - name: Run semantic-release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: semantic-release
