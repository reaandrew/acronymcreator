name: Claude Code Action

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  claude-code:
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude'))

    env:
      CLAUDE_BRANCH: claude/${{ github.run_id }}
      CLAUDE_BASE: ${{ github.event.repository.default_branch }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0

      # Pull the thread context (issue/PR title & body + the triggering comment)
      - name: Extract thread context
        id: ctx
        run: |
          set -euo pipefail
          title=$(jq -r '.issue.title // .pull_request.title // empty' "$GITHUB_EVENT_PATH")
          body=$(jq -r '.issue.body  // .pull_request.body  // empty' "$GITHUB_EVENT_PATH")
          comment=$(jq -r '.comment.body' "$GITHUB_EVENT_PATH")
          {
            echo "title<<EOF";   echo "${title}";   echo "EOF"
            echo "body<<EOF";    echo "${body}";    echo "EOF"
            echo "comment<<EOF"; echo "${comment}"; echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Claude Code Action
        uses: anthropics/claude-code-action@v1
        with:
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          github_token: ${{ secrets.AUTO_FIX_PAT }}
          trigger_phrase: "@claude"
          # Feed Claude the context and force a PR to be opened
          prompt: |
            You are an autonomous code agent.
            Context:
            - Title: ${{ steps.ctx.outputs.title }}
            - Issue/PR body:
            ---
            ${{ steps.ctx.outputs.body }}
            ---
            - Triggering comment:
            ---
            ${{ steps.ctx.outputs.comment }}
            ---

            Task:
            1) Infer the requested change from the context above.
            2) Create and use branch "${{ env.CLAUDE_BRANCH }}" from "${{ env.CLAUDE_BASE }}".
            3) Implement the change, commit with conventional commit format, push the branch.
            4) OPEN A PULL REQUEST back to "${{ env.CLAUDE_BASE }}".
               - Title: concise, conventional commit style (feat:/fix:/etc).
               - Body: summary, test notes, closes the related issue.
            If details are ambiguous, proceed safely (feature flag/stub/tests/docs) and open a **draft** PR with a checklist.

          claude_args: |
            --allowedTools "Read,Glob,Grep,Edit,Write,MultiEdit,Bash(git:*),Bash(gh:*),Bash(python:*),Bash(python3:*),Bash(pytest:*),Bash(pre-commit:*),Bash(which:*),Bash(ls:*)"
            --max-turns 50
